/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function() {
var exports = {};
exports.id = "pages/_app";
exports.ids = ["pages/_app"];
exports.modules = {

/***/ "./next-auth/client/index.js":
/*!***********************************!*\
  !*** ./next-auth/client/index.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useSession\": function() { return /* binding */ useSession; },\n/* harmony export */   \"getSession\": function() { return /* binding */ getSession; },\n/* harmony export */   \"getCsrfToken\": function() { return /* binding */ getCsrfToken; },\n/* harmony export */   \"getProviders\": function() { return /* binding */ getProviders; },\n/* harmony export */   \"signIn\": function() { return /* binding */ signIn; },\n/* harmony export */   \"signOut\": function() { return /* binding */ signOut; },\n/* harmony export */   \"setOptions\": function() { return /* binding */ setOptions; },\n/* harmony export */   \"Provider\": function() { return /* binding */ Provider; },\n/* harmony export */   \"options\": function() { return /* binding */ setOptions; },\n/* harmony export */   \"session\": function() { return /* binding */ getSession; },\n/* harmony export */   \"providers\": function() { return /* binding */ getProviders; },\n/* harmony export */   \"csrfToken\": function() { return /* binding */ getCsrfToken; },\n/* harmony export */   \"signin\": function() { return /* binding */ signIn; },\n/* harmony export */   \"signout\": function() { return /* binding */ signOut; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/logger */ \"./next-auth/lib/logger.js\");\n/* harmony import */ var _lib_parse_url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/parse-url */ \"./next-auth/lib/parse-url.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Note about signIn() and signOut() methods:\n//\n// On signIn() and signOut() we pass 'json: true' to request a response in JSON\n// instead of HTTP as redirect URLs on other domains are not returned to\n// requests made using the fetch API in the browser, and we need to ask the API\n// to return the response as a JSON object (the end point still defaults to\n// returning an HTTP response with a redirect for non-JavaScript clients).\n//\n// We use HTTP POST requests with CSRF Tokens to protect against CSRF attacks.\n\n\n // This behaviour mirrors the default behaviour for getting the site name that\n// happens server side in server/index.js\n// 1. An empty value is legitimate when the code is being invoked client side as\n//    relative URLs are valid in that context and so defaults to empty.\n// 2. When invoked server side the value is picked up from an environment\n//    variable and defaults to 'http://localhost:3000'.\n\n/** @type {import(\"types/internals/client\").NextAuthConfig} */\n\nconst __NEXTAUTH = {\n  baseUrl: (0,_lib_parse_url__WEBPACK_IMPORTED_MODULE_2__.default)(process.env.NEXTAUTH_URL || process.env.VERCEL_URL).baseUrl,\n  basePath: (0,_lib_parse_url__WEBPACK_IMPORTED_MODULE_2__.default)(process.env.NEXTAUTH_URL).basePath,\n  baseUrlServer: (0,_lib_parse_url__WEBPACK_IMPORTED_MODULE_2__.default)(process.env.NEXTAUTH_URL_INTERNAL || process.env.NEXTAUTH_URL || process.env.VERCEL_URL).baseUrl,\n  basePathServer: (0,_lib_parse_url__WEBPACK_IMPORTED_MODULE_2__.default)(process.env.NEXTAUTH_URL_INTERNAL || process.env.NEXTAUTH_URL).basePath,\n  keepAlive: 0,\n  clientMaxAge: 0,\n  // Properties starting with _ are used for tracking internal app state\n  _clientLastSync: 0,\n  _clientSyncTimer: null,\n  _eventListenersAdded: false,\n  _clientSession: undefined,\n  _getSession: () => {}\n};\nconst logger = (0,_lib_logger__WEBPACK_IMPORTED_MODULE_1__.proxyLogger)(_lib_logger__WEBPACK_IMPORTED_MODULE_1__.default, __NEXTAUTH.basePath);\nconst broadcast = BroadcastChannel(); // Add event listners on load\n\nif (false) {} // Context to store session data globally\n\n/** @type {import(\"types/internals/client\").SessionContext} */\n\n\nconst SessionContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useSession(session) {\n  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SessionContext);\n  if (context) return context;\n  return _useSessionHook(session);\n}\n\nfunction _useSessionHook(session) {\n  const {\n    0: data,\n    1: setData\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(session);\n  const {\n    0: loading,\n    1: setLoading\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!data);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    __NEXTAUTH._getSession = async ({\n      event = null\n    } = {}) => {\n      try {\n        const triggredByEvent = event !== null;\n        const triggeredByStorageEvent = event === \"storage\";\n        const clientMaxAge = __NEXTAUTH.clientMaxAge;\n        const clientLastSync = parseInt(__NEXTAUTH._clientLastSync);\n\n        const currentTime = _now();\n\n        const clientSession = __NEXTAUTH._clientSession; // Updates triggered by a storage event *always* trigger an update and we\n        // always update if we don't have any value for the current session state.\n\n        if (!triggeredByStorageEvent && clientSession !== undefined) {\n          if (clientMaxAge === 0 && triggredByEvent !== true) {\n            // If there is no time defined for when a session should be considered\n            // stale, then it's okay to use the value we have until an event is\n            // triggered which updates it.\n            return;\n          } else if (clientMaxAge > 0 && clientSession === null) {\n            // If the client doesn't have a session then we don't need to call\n            // the server to check if it does (if they have signed in via another\n            // tab or window that will come through as a triggeredByStorageEvent\n            // event and will skip this logic)\n            return;\n          } else if (clientMaxAge > 0 && currentTime < clientLastSync + clientMaxAge) {\n            // If the session freshness is within clientMaxAge then don't request\n            // it again on this call (avoids too many invokations).\n            return;\n          }\n        }\n\n        if (clientSession === undefined) {\n          __NEXTAUTH._clientSession = null;\n        } // Update clientLastSync before making response to avoid repeated\n        // invokations that would otherwise be triggered while we are still\n        // waiting for a response.\n\n\n        __NEXTAUTH._clientLastSync = _now(); // If this call was invoked via a storage event (i.e. another window) then\n        // tell getSession not to trigger an event when it calls to avoid an\n        // infinate loop.\n\n        const newClientSessionData = await getSession({\n          triggerEvent: !triggeredByStorageEvent\n        }); // Save session state internally, just so we can track that we've checked\n        // if a session exists at least once.\n\n        __NEXTAUTH._clientSession = newClientSessionData;\n        setData(newClientSessionData);\n        setLoading(false);\n      } catch (error) {\n        logger.error(\"CLIENT_USE_SESSION_ERROR\", error);\n        setLoading(false);\n      }\n    };\n\n    __NEXTAUTH._getSession();\n  });\n  return [data, loading];\n}\n\nasync function getSession(ctx) {\n  var _ctx$triggerEvent;\n\n  const session = await _fetchData(\"session\", ctx);\n\n  if ((_ctx$triggerEvent = ctx === null || ctx === void 0 ? void 0 : ctx.triggerEvent) !== null && _ctx$triggerEvent !== void 0 ? _ctx$triggerEvent : true) {\n    broadcast.post({\n      event: \"session\",\n      data: {\n        trigger: \"getSession\"\n      }\n    });\n  }\n\n  return session;\n}\nasync function getCsrfToken(ctx) {\n  var _await$_fetchData;\n\n  return (_await$_fetchData = await _fetchData(\"csrf\", ctx)) === null || _await$_fetchData === void 0 ? void 0 : _await$_fetchData.csrfToken;\n}\nasync function getProviders() {\n  return await _fetchData(\"providers\");\n}\nasync function signIn(provider, options = {}, authorizationParams = {}) {\n  const {\n    callbackUrl = window.location.href,\n    redirect = true\n  } = options;\n\n  const baseUrl = _apiBaseUrl();\n\n  const providers = await getProviders();\n\n  if (!providers) {\n    return window.location.replace(`${baseUrl}/error`);\n  }\n\n  if (!(provider in providers)) {\n    return window.location.replace(`${baseUrl}/signin?callbackUrl=${encodeURIComponent(callbackUrl)}`);\n  }\n\n  const isCredentials = providers[provider].type === \"credentials\";\n  const isEmail = providers[provider].type === \"email\";\n  const isSupportingReturn = isCredentials || isEmail;\n  const signInUrl = isCredentials ? `${baseUrl}/callback/${provider}` : `${baseUrl}/signin/${provider}`;\n  const _signInUrl = `${signInUrl}?${new URLSearchParams(authorizationParams)}`;\n  const res = await fetch(_signInUrl, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n      csrfToken: await getCsrfToken(),\n      callbackUrl,\n      json: true\n    }))\n  });\n  const data = await res.json();\n\n  if (redirect || !isSupportingReturn) {\n    var _data$url;\n\n    const url = (_data$url = data.url) !== null && _data$url !== void 0 ? _data$url : callbackUrl;\n    window.location.replace(url); // If url contains a hash, the browser does not reload the page. We reload manually\n\n    if (url.includes(\"#\")) window.location.reload();\n    return;\n  }\n\n  const error = new URL(data.url).searchParams.get(\"error\");\n\n  if (res.ok) {\n    await __NEXTAUTH._getSession({\n      event: \"storage\"\n    });\n  }\n\n  return {\n    error,\n    status: res.status,\n    ok: res.ok,\n    url: error ? null : data.url\n  };\n}\nasync function signOut(options = {}) {\n  const {\n    callbackUrl = window.location.href,\n    redirect = true\n  } = options;\n\n  const baseUrl = _apiBaseUrl();\n\n  const fetchOptions = {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      csrfToken: await getCsrfToken(),\n      callbackUrl,\n      json: true\n    })\n  };\n  const res = await fetch(`${baseUrl}/signout`, fetchOptions);\n  const data = await res.json();\n  broadcast.post({\n    event: \"session\",\n    data: {\n      trigger: \"signout\"\n    }\n  });\n\n  if (redirect) {\n    var _data$url2;\n\n    const url = (_data$url2 = data.url) !== null && _data$url2 !== void 0 ? _data$url2 : callbackUrl;\n    window.location.replace(url); // If url contains a hash, the browser does not reload the page. We reload manually\n\n    if (url.includes(\"#\")) window.location.reload();\n    return;\n  }\n\n  await __NEXTAUTH._getSession({\n    event: \"storage\"\n  });\n  return data;\n} // Method to set options. The documented way is to use the provider, but this\n// method is being left in as an alternative, that will be helpful if/when we\n// expose a vanilla JavaScript version that doesn't depend on React.\n\nfunction setOptions({\n  baseUrl,\n  basePath,\n  clientMaxAge,\n  keepAlive\n} = {}) {\n  if (baseUrl) __NEXTAUTH.baseUrl = baseUrl;\n  if (basePath) __NEXTAUTH.basePath = basePath;\n  if (clientMaxAge) __NEXTAUTH.clientMaxAge = clientMaxAge;\n\n  if (keepAlive) {\n    __NEXTAUTH.keepAlive = keepAlive;\n    if (true) return; // Clear existing timer (if there is one)\n\n    if (__NEXTAUTH._clientSyncTimer !== null) {\n      clearTimeout(__NEXTAUTH._clientSyncTimer);\n    } // Set next timer to trigger in number of seconds\n\n\n    __NEXTAUTH._clientSyncTimer = setTimeout(async () => {\n      // Only invoke keepalive when a session exists\n      if (!__NEXTAUTH._clientSession) return;\n      await __NEXTAUTH._getSession({\n        event: \"timer\"\n      });\n    }, keepAlive * 1000);\n  }\n}\nfunction Provider({\n  children,\n  session,\n  options\n}) {\n  setOptions(options);\n  return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(SessionContext.Provider, {\n    value: useSession(session)\n  }, children);\n}\n/**\n * If passed 'appContext' via getInitialProps() in _app.js\n * then get the req object from ctx and use that for the\n * req value to allow _fetchData to\n * work seemlessly in getInitialProps() on server side\n * pages *and* in _app.js.\n */\n\nasync function _fetchData(path, {\n  ctx,\n  req = ctx === null || ctx === void 0 ? void 0 : ctx.req\n} = {}) {\n  try {\n    const baseUrl = await _apiBaseUrl();\n    const options = req ? {\n      headers: {\n        cookie: req.headers.cookie\n      }\n    } : {};\n    const res = await fetch(`${baseUrl}/${path}`, options);\n    const data = await res.json();\n    if (!res.ok) throw data;\n    return Object.keys(data).length > 0 ? data : null; // Return null if data empty\n  } catch (error) {\n    logger.error(\"CLIENT_FETCH_ERROR\", path, error);\n    return null;\n  }\n}\n\nfunction _apiBaseUrl() {\n  if (true) {\n    // NEXTAUTH_URL should always be set explicitly to support server side calls - log warning if not set\n    if (!process.env.NEXTAUTH_URL) {\n      logger.warn(\"NEXTAUTH_URL\", \"NEXTAUTH_URL environment variable not set\");\n    } // Return absolute path when called server side\n\n\n    return `${__NEXTAUTH.baseUrlServer}${__NEXTAUTH.basePathServer}`;\n  } // Return relative path when called client side\n\n\n  return __NEXTAUTH.basePath;\n}\n/** Returns the number of seconds elapsed since January 1, 1970 00:00:00 UTC. */\n\n\nfunction _now() {\n  return Math.floor(Date.now() / 1000);\n}\n/**\n * Inspired by [Broadcast Channel API](https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API)\n * Only not using it directly, because Safari does not support it.\n *\n * https://caniuse.com/?search=broadcastchannel\n */\n\n\nfunction BroadcastChannel(name = \"nextauth.message\") {\n  return {\n    /**\n     * Get notified by other tabs/windows.\n     * @param {(message: import(\"types/internals/client\").BroadcastMessage) => void} onReceive\n     */\n    receive(onReceive) {\n      if (true) return;\n      window.addEventListener(\"storage\", async event => {\n        if (event.key !== name) return;\n        /** @type {import(\"types/internals/client\").BroadcastMessage} */\n\n        const message = JSON.parse(event.newValue);\n        if ((message === null || message === void 0 ? void 0 : message.event) !== \"session\" || !(message !== null && message !== void 0 && message.data)) return;\n        onReceive(message);\n      });\n    },\n\n    /** Notify other tabs/windows. */\n    post(message) {\n      if (typeof localStorage === \"undefined\") return;\n      localStorage.setItem(name, JSON.stringify(_objectSpread(_objectSpread({}, message), {}, {\n        timestamp: _now()\n      })));\n    }\n\n  };\n} // Some methods are exported with more than one name. This provides some\n// flexibility over how they can be invoked and backwards compatibility\n// with earlier releases. These should be removed in a newer release, as it only\n// creates problems for bundlers and adds confusion to users. TypeScript declarations\n// will provide sufficient help when importing\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  getSession,\n  getCsrfToken,\n  getProviders,\n  useSession,\n  signIn,\n  signOut,\n  Provider,\n\n  /* Deprecated / unsupported features below this line */\n  // Use setOptions() set options globally in the app.\n  setOptions,\n  // Some methods are exported with more than one name. This provides some\n  // flexibility over how they can be invoked and backwards compatibility\n  // with earlier releases.\n  options: setOptions,\n  session: getSession,\n  providers: getProviders,\n  csrfToken: getCsrfToken,\n  signin: signIn,\n  signout: signOut\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./next-auth/client/index.js\n");

/***/ }),

/***/ "./next-auth/lib/logger.js":
/*!*********************************!*\
  !*** ./next-auth/lib/logger.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setLogger\": function() { return /* binding */ setLogger; },\n/* harmony export */   \"proxyLogger\": function() { return /* binding */ proxyLogger; }\n/* harmony export */ });\n/** @type {import(\"types\").LoggerInstance} */\nconst _logger = {\n  error(code, ...message) {\n    console.error(`[next-auth][error][${code.toLowerCase()}]`, `\\nhttps://next-auth.js.org/errors#${code.toLowerCase()}`, ...message);\n  },\n\n  warn(code, ...message) {\n    console.warn(`[next-auth][warn][${code.toLowerCase()}]`, `\\nhttps://next-auth.js.org/warnings#${code.toLowerCase()}`, ...message);\n  },\n\n  debug(code, ...message) {\n    var _process, _process$env;\n\n    if (!((_process = process) !== null && _process !== void 0 && (_process$env = _process.env) !== null && _process$env !== void 0 && _process$env._NEXTAUTH_DEBUG)) return;\n    console.log(`[next-auth][debug][${code.toLowerCase()}]`, ...message);\n  }\n\n};\n/**\n * Override the built-in logger.\n * Any `undefined` level will use the default logger.\n * @param {Partial<import(\"types\").LoggerInstance>} newLogger\n */\n\nfunction setLogger(newLogger = {}) {\n  if (newLogger.error) _logger.error = newLogger.error;\n  if (newLogger.warn) _logger.warn = newLogger.warn;\n  if (newLogger.debug) _logger.debug = newLogger.debug;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (_logger);\n/**\n * Serializes client-side log messages and sends them to the server\n * @param {import(\"types\").LoggerInstance} logger\n * @param {string} basePath\n * @return {import(\"types\").LoggerInstance}\n */\n\nfunction proxyLogger(logger = _logger, basePath) {\n  try {\n    if (true) {\n      return logger;\n    }\n\n    const clientLogger = {};\n\n    for (const level in logger) {\n      clientLogger[level] = (code, ...message) => {\n        _logger[level](code, ...message); // Log on client as usual\n\n\n        const url = `${basePath}/_log`;\n        const body = new URLSearchParams({\n          level,\n          code,\n          message: JSON.stringify(message.map(m => {\n            if (m instanceof Error) {\n              // Serializing errors: https://iaincollins.medium.com/error-handling-in-javascript-a6172ccdf9af\n              return {\n                name: m.name,\n                message: m.message,\n                stack: m.stack\n              };\n            }\n\n            return m;\n          }))\n        });\n\n        if (navigator.sendBeacon) {\n          return navigator.sendBeacon(url, body);\n        }\n\n        return fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body\n        });\n      };\n    }\n\n    return clientLogger;\n  } catch {\n    return _logger;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtYXBwLy4vbmV4dC1hdXRoL2xpYi9sb2dnZXIuanM/NDk0MSJdLCJuYW1lcyI6WyJfbG9nZ2VyIiwiZXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsImNvbnNvbGUiLCJ0b0xvd2VyQ2FzZSIsIndhcm4iLCJkZWJ1ZyIsInByb2Nlc3MiLCJlbnYiLCJfTkVYVEFVVEhfREVCVUciLCJsb2ciLCJzZXRMb2dnZXIiLCJuZXdMb2dnZXIiLCJwcm94eUxvZ2dlciIsImxvZ2dlciIsImJhc2VQYXRoIiwiY2xpZW50TG9nZ2VyIiwibGV2ZWwiLCJ1cmwiLCJib2R5IiwiVVJMU2VhcmNoUGFyYW1zIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1hcCIsIm0iLCJFcnJvciIsIm5hbWUiLCJzdGFjayIsIm5hdmlnYXRvciIsInNlbmRCZWFjb24iLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxNQUFNQSxPQUFPLEdBQUc7QUFDZEMsT0FBSyxDQUFDQyxJQUFELEVBQU8sR0FBR0MsT0FBVixFQUFtQjtBQUN0QkMsV0FBTyxDQUFDSCxLQUFSLENBQ0csc0JBQXFCQyxJQUFJLENBQUNHLFdBQUwsRUFBbUIsR0FEM0MsRUFFRyxxQ0FBb0NILElBQUksQ0FBQ0csV0FBTCxFQUFtQixFQUYxRCxFQUdFLEdBQUdGLE9BSEw7QUFLRCxHQVBhOztBQVFkRyxNQUFJLENBQUNKLElBQUQsRUFBTyxHQUFHQyxPQUFWLEVBQW1CO0FBQ3JCQyxXQUFPLENBQUNFLElBQVIsQ0FDRyxxQkFBb0JKLElBQUksQ0FBQ0csV0FBTCxFQUFtQixHQUQxQyxFQUVHLHVDQUFzQ0gsSUFBSSxDQUFDRyxXQUFMLEVBQW1CLEVBRjVELEVBR0UsR0FBR0YsT0FITDtBQUtELEdBZGE7O0FBZWRJLE9BQUssQ0FBQ0wsSUFBRCxFQUFPLEdBQUdDLE9BQVYsRUFBbUI7QUFBQTs7QUFDdEIsUUFBSSxjQUFDSyxPQUFELHFEQUFDLFNBQVNDLEdBQVYseUNBQUMsYUFBY0MsZUFBZixDQUFKLEVBQW9DO0FBQ3BDTixXQUFPLENBQUNPLEdBQVIsQ0FBYSxzQkFBcUJULElBQUksQ0FBQ0csV0FBTCxFQUFtQixHQUFyRCxFQUF5RCxHQUFHRixPQUE1RDtBQUNEOztBQWxCYSxDQUFoQjtBQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNTLFNBQVQsQ0FBbUJDLFNBQVMsR0FBRyxFQUEvQixFQUFtQztBQUN4QyxNQUFJQSxTQUFTLENBQUNaLEtBQWQsRUFBcUJELE9BQU8sQ0FBQ0MsS0FBUixHQUFnQlksU0FBUyxDQUFDWixLQUExQjtBQUNyQixNQUFJWSxTQUFTLENBQUNQLElBQWQsRUFBb0JOLE9BQU8sQ0FBQ00sSUFBUixHQUFlTyxTQUFTLENBQUNQLElBQXpCO0FBQ3BCLE1BQUlPLFNBQVMsQ0FBQ04sS0FBZCxFQUFxQlAsT0FBTyxDQUFDTyxLQUFSLEdBQWdCTSxTQUFTLENBQUNOLEtBQTFCO0FBQ3RCO0FBRUQsK0RBQWVQLE9BQWY7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sU0FBU2MsV0FBVCxDQUFxQkMsTUFBTSxHQUFHZixPQUE5QixFQUF1Q2dCLFFBQXZDLEVBQWlEO0FBQ3RELE1BQUk7QUFDRixjQUFtQztBQUNqQyxhQUFPRCxNQUFQO0FBQ0Q7O0FBRUQsVUFBTUUsWUFBWSxHQUFHLEVBQXJCOztBQUNBLFNBQUssTUFBTUMsS0FBWCxJQUFvQkgsTUFBcEIsRUFBNEI7QUFDMUJFLGtCQUFZLENBQUNDLEtBQUQsQ0FBWixHQUFzQixDQUFDaEIsSUFBRCxFQUFPLEdBQUdDLE9BQVYsS0FBc0I7QUFDMUNILGVBQU8sQ0FBQ2tCLEtBQUQsQ0FBUCxDQUFlaEIsSUFBZixFQUFxQixHQUFHQyxPQUF4QixFQUQwQyxDQUNUOzs7QUFFakMsY0FBTWdCLEdBQUcsR0FBSSxHQUFFSCxRQUFTLE9BQXhCO0FBQ0EsY0FBTUksSUFBSSxHQUFHLElBQUlDLGVBQUosQ0FBb0I7QUFDL0JILGVBRCtCO0FBRS9CaEIsY0FGK0I7QUFHL0JDLGlCQUFPLEVBQUVtQixJQUFJLENBQUNDLFNBQUwsQ0FDUHBCLE9BQU8sQ0FBQ3FCLEdBQVIsQ0FBYUMsQ0FBRCxJQUFPO0FBQ2pCLGdCQUFJQSxDQUFDLFlBQVlDLEtBQWpCLEVBQXdCO0FBQ3RCO0FBQ0EscUJBQU87QUFBRUMsb0JBQUksRUFBRUYsQ0FBQyxDQUFDRSxJQUFWO0FBQWdCeEIsdUJBQU8sRUFBRXNCLENBQUMsQ0FBQ3RCLE9BQTNCO0FBQW9DeUIscUJBQUssRUFBRUgsQ0FBQyxDQUFDRztBQUE3QyxlQUFQO0FBQ0Q7O0FBQ0QsbUJBQU9ILENBQVA7QUFDRCxXQU5ELENBRE87QUFIc0IsU0FBcEIsQ0FBYjs7QUFhQSxZQUFJSSxTQUFTLENBQUNDLFVBQWQsRUFBMEI7QUFDeEIsaUJBQU9ELFNBQVMsQ0FBQ0MsVUFBVixDQUFxQlgsR0FBckIsRUFBMEJDLElBQTFCLENBQVA7QUFDRDs7QUFDRCxlQUFPVyxLQUFLLENBQUNaLEdBQUQsRUFBTTtBQUNoQmEsZ0JBQU0sRUFBRSxNQURRO0FBRWhCQyxpQkFBTyxFQUFFO0FBQUUsNEJBQWdCO0FBQWxCLFdBRk87QUFHaEJiO0FBSGdCLFNBQU4sQ0FBWjtBQUtELE9BekJEO0FBMEJEOztBQUNELFdBQU9ILFlBQVA7QUFDRCxHQW5DRCxDQW1DRSxNQUFNO0FBQ04sV0FBT2pCLE9BQVA7QUFDRDtBQUNGIiwiZmlsZSI6Ii4vbmV4dC1hdXRoL2xpYi9sb2dnZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQHR5cGUge2ltcG9ydChcInR5cGVzXCIpLkxvZ2dlckluc3RhbmNlfSAqL1xuY29uc3QgX2xvZ2dlciA9IHtcbiAgZXJyb3IoY29kZSwgLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgW25leHQtYXV0aF1bZXJyb3JdWyR7Y29kZS50b0xvd2VyQ2FzZSgpfV1gLFxuICAgICAgYFxcbmh0dHBzOi8vbmV4dC1hdXRoLmpzLm9yZy9lcnJvcnMjJHtjb2RlLnRvTG93ZXJDYXNlKCl9YCxcbiAgICAgIC4uLm1lc3NhZ2VcbiAgICApXG4gIH0sXG4gIHdhcm4oY29kZSwgLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIGBbbmV4dC1hdXRoXVt3YXJuXVske2NvZGUudG9Mb3dlckNhc2UoKX1dYCxcbiAgICAgIGBcXG5odHRwczovL25leHQtYXV0aC5qcy5vcmcvd2FybmluZ3MjJHtjb2RlLnRvTG93ZXJDYXNlKCl9YCxcbiAgICAgIC4uLm1lc3NhZ2VcbiAgICApXG4gIH0sXG4gIGRlYnVnKGNvZGUsIC4uLm1lc3NhZ2UpIHtcbiAgICBpZiAoIXByb2Nlc3M/LmVudj8uX05FWFRBVVRIX0RFQlVHKSByZXR1cm5cbiAgICBjb25zb2xlLmxvZyhgW25leHQtYXV0aF1bZGVidWddWyR7Y29kZS50b0xvd2VyQ2FzZSgpfV1gLCAuLi5tZXNzYWdlKVxuICB9LFxufVxuXG4vKipcbiAqIE92ZXJyaWRlIHRoZSBidWlsdC1pbiBsb2dnZXIuXG4gKiBBbnkgYHVuZGVmaW5lZGAgbGV2ZWwgd2lsbCB1c2UgdGhlIGRlZmF1bHQgbG9nZ2VyLlxuICogQHBhcmFtIHtQYXJ0aWFsPGltcG9ydChcInR5cGVzXCIpLkxvZ2dlckluc3RhbmNlPn0gbmV3TG9nZ2VyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRMb2dnZXIobmV3TG9nZ2VyID0ge30pIHtcbiAgaWYgKG5ld0xvZ2dlci5lcnJvcikgX2xvZ2dlci5lcnJvciA9IG5ld0xvZ2dlci5lcnJvclxuICBpZiAobmV3TG9nZ2VyLndhcm4pIF9sb2dnZXIud2FybiA9IG5ld0xvZ2dlci53YXJuXG4gIGlmIChuZXdMb2dnZXIuZGVidWcpIF9sb2dnZXIuZGVidWcgPSBuZXdMb2dnZXIuZGVidWdcbn1cblxuZXhwb3J0IGRlZmF1bHQgX2xvZ2dlclxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgY2xpZW50LXNpZGUgbG9nIG1lc3NhZ2VzIGFuZCBzZW5kcyB0aGVtIHRvIHRoZSBzZXJ2ZXJcbiAqIEBwYXJhbSB7aW1wb3J0KFwidHlwZXNcIikuTG9nZ2VySW5zdGFuY2V9IGxvZ2dlclxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VQYXRoXG4gKiBAcmV0dXJuIHtpbXBvcnQoXCJ0eXBlc1wiKS5Mb2dnZXJJbnN0YW5jZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3h5TG9nZ2VyKGxvZ2dlciA9IF9sb2dnZXIsIGJhc2VQYXRoKSB7XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiBsb2dnZXJcbiAgICB9XG5cbiAgICBjb25zdCBjbGllbnRMb2dnZXIgPSB7fVxuICAgIGZvciAoY29uc3QgbGV2ZWwgaW4gbG9nZ2VyKSB7XG4gICAgICBjbGllbnRMb2dnZXJbbGV2ZWxdID0gKGNvZGUsIC4uLm1lc3NhZ2UpID0+IHtcbiAgICAgICAgX2xvZ2dlcltsZXZlbF0oY29kZSwgLi4ubWVzc2FnZSkgLy8gTG9nIG9uIGNsaWVudCBhcyB1c3VhbFxuXG4gICAgICAgIGNvbnN0IHVybCA9IGAke2Jhc2VQYXRofS9fbG9nYFxuICAgICAgICBjb25zdCBib2R5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgY29kZSxcbiAgICAgICAgICBtZXNzYWdlOiBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIG1lc3NhZ2UubWFwKChtKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChtIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBTZXJpYWxpemluZyBlcnJvcnM6IGh0dHBzOi8vaWFpbmNvbGxpbnMubWVkaXVtLmNvbS9lcnJvci1oYW5kbGluZy1pbi1qYXZhc2NyaXB0LWE2MTcyY2NkZjlhZlxuICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6IG0ubmFtZSwgbWVzc2FnZTogbS5tZXNzYWdlLCBzdGFjazogbS5zdGFjayB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIG1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKG5hdmlnYXRvci5zZW5kQmVhY29uKSB7XG4gICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5zZW5kQmVhY29uKHVybCwgYm9keSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgICAgYm9keSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNsaWVudExvZ2dlclxuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gX2xvZ2dlclxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./next-auth/lib/logger.js\n");

/***/ }),

/***/ "./next-auth/lib/parse-url.js":
/*!************************************!*\
  !*** ./next-auth/lib/parse-url.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ parseUrl; }\n/* harmony export */ });\n/**\n * Simple universal (client/server) function to split host and path\n * We use this rather than a library because we need to use the same logic both\n * client and server side and we only need to parse out the host and path, while\n * supporting a default value, so a simple split is sufficent.\n * @param {string} url\n */\nfunction parseUrl(url) {\n  // Default values\n  const defaultHost = 'http://localhost:3000';\n  const defaultPath = '/api/auth';\n\n  if (!url) {\n    url = `${defaultHost}${defaultPath}`;\n  } // Default to HTTPS if no protocol explictly specified\n\n\n  const protocol = url.startsWith('http:') ? 'http' : 'https'; // Normalize URLs by stripping protocol and no trailing slash\n\n  url = url.replace(/^https?:\\/\\//, '').replace(/\\/$/, ''); // Simple split based on first /\n\n  const [_host, ..._path] = url.split('/');\n  const baseUrl = _host ? `${protocol}://${_host}` : defaultHost;\n  const basePath = _path.length > 0 ? `/${_path.join('/')}` : defaultPath;\n  return {\n    baseUrl,\n    basePath\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtYXBwLy4vbmV4dC1hdXRoL2xpYi9wYXJzZS11cmwuanM/OTkyNyJdLCJuYW1lcyI6WyJwYXJzZVVybCIsInVybCIsImRlZmF1bHRIb3N0IiwiZGVmYXVsdFBhdGgiLCJwcm90b2NvbCIsInN0YXJ0c1dpdGgiLCJyZXBsYWNlIiwiX2hvc3QiLCJfcGF0aCIsInNwbGl0IiwiYmFzZVVybCIsImJhc2VQYXRoIiwibGVuZ3RoIiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsU0FBU0EsUUFBVCxDQUFtQkMsR0FBbkIsRUFBd0I7QUFDckM7QUFDQSxRQUFNQyxXQUFXLEdBQUcsdUJBQXBCO0FBQ0EsUUFBTUMsV0FBVyxHQUFHLFdBQXBCOztBQUVBLE1BQUksQ0FBQ0YsR0FBTCxFQUFVO0FBQUVBLE9BQUcsR0FBSSxHQUFFQyxXQUFZLEdBQUVDLFdBQVksRUFBbkM7QUFBc0MsR0FMYixDQU9yQzs7O0FBQ0EsUUFBTUMsUUFBUSxHQUFHSCxHQUFHLENBQUNJLFVBQUosQ0FBZSxPQUFmLElBQTBCLE1BQTFCLEdBQW1DLE9BQXBELENBUnFDLENBVXJDOztBQUNBSixLQUFHLEdBQUdBLEdBQUcsQ0FBQ0ssT0FBSixDQUFZLGNBQVosRUFBNEIsRUFBNUIsRUFBZ0NBLE9BQWhDLENBQXdDLEtBQXhDLEVBQStDLEVBQS9DLENBQU4sQ0FYcUMsQ0FhckM7O0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVEsR0FBR0MsS0FBWCxJQUFvQlAsR0FBRyxDQUFDUSxLQUFKLENBQVUsR0FBVixDQUExQjtBQUNBLFFBQU1DLE9BQU8sR0FBR0gsS0FBSyxHQUFJLEdBQUVILFFBQVMsTUFBS0csS0FBTSxFQUExQixHQUE4QkwsV0FBbkQ7QUFDQSxRQUFNUyxRQUFRLEdBQUdILEtBQUssQ0FBQ0ksTUFBTixHQUFlLENBQWYsR0FBb0IsSUFBR0osS0FBSyxDQUFDSyxJQUFOLENBQVcsR0FBWCxDQUFnQixFQUF2QyxHQUEyQ1YsV0FBNUQ7QUFFQSxTQUFPO0FBQUVPLFdBQUY7QUFBV0M7QUFBWCxHQUFQO0FBQ0QiLCJmaWxlIjoiLi9uZXh0LWF1dGgvbGliL3BhcnNlLXVybC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2ltcGxlIHVuaXZlcnNhbCAoY2xpZW50L3NlcnZlcikgZnVuY3Rpb24gdG8gc3BsaXQgaG9zdCBhbmQgcGF0aFxuICogV2UgdXNlIHRoaXMgcmF0aGVyIHRoYW4gYSBsaWJyYXJ5IGJlY2F1c2Ugd2UgbmVlZCB0byB1c2UgdGhlIHNhbWUgbG9naWMgYm90aFxuICogY2xpZW50IGFuZCBzZXJ2ZXIgc2lkZSBhbmQgd2Ugb25seSBuZWVkIHRvIHBhcnNlIG91dCB0aGUgaG9zdCBhbmQgcGF0aCwgd2hpbGVcbiAqIHN1cHBvcnRpbmcgYSBkZWZhdWx0IHZhbHVlLCBzbyBhIHNpbXBsZSBzcGxpdCBpcyBzdWZmaWNlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlVXJsICh1cmwpIHtcbiAgLy8gRGVmYXVsdCB2YWx1ZXNcbiAgY29uc3QgZGVmYXVsdEhvc3QgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwJ1xuICBjb25zdCBkZWZhdWx0UGF0aCA9ICcvYXBpL2F1dGgnXG5cbiAgaWYgKCF1cmwpIHsgdXJsID0gYCR7ZGVmYXVsdEhvc3R9JHtkZWZhdWx0UGF0aH1gIH1cblxuICAvLyBEZWZhdWx0IHRvIEhUVFBTIGlmIG5vIHByb3RvY29sIGV4cGxpY3RseSBzcGVjaWZpZWRcbiAgY29uc3QgcHJvdG9jb2wgPSB1cmwuc3RhcnRzV2l0aCgnaHR0cDonKSA/ICdodHRwJyA6ICdodHRwcydcblxuICAvLyBOb3JtYWxpemUgVVJMcyBieSBzdHJpcHBpbmcgcHJvdG9jb2wgYW5kIG5vIHRyYWlsaW5nIHNsYXNoXG4gIHVybCA9IHVybC5yZXBsYWNlKC9eaHR0cHM/OlxcL1xcLy8sICcnKS5yZXBsYWNlKC9cXC8kLywgJycpXG5cbiAgLy8gU2ltcGxlIHNwbGl0IGJhc2VkIG9uIGZpcnN0IC9cbiAgY29uc3QgW19ob3N0LCAuLi5fcGF0aF0gPSB1cmwuc3BsaXQoJy8nKVxuICBjb25zdCBiYXNlVXJsID0gX2hvc3QgPyBgJHtwcm90b2NvbH06Ly8ke19ob3N0fWAgOiBkZWZhdWx0SG9zdFxuICBjb25zdCBiYXNlUGF0aCA9IF9wYXRoLmxlbmd0aCA+IDAgPyBgLyR7X3BhdGguam9pbignLycpfWAgOiBkZWZhdWx0UGF0aFxuXG4gIHJldHVybiB7IGJhc2VVcmwsIGJhc2VQYXRoIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./next-auth/lib/parse-url.js\n");

/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ App; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/client */ \"./next-auth/client/index.js\");\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./styles.css */ \"./pages/styles.css\");\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_styles_css__WEBPACK_IMPORTED_MODULE_2__);\n\nvar _jsxFileName = \"/root/blue-auth/app/pages/_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n // Use the <Provider> to improve performance and allow components that call\n// `useSession()` anywhere in your application to access the `session` object.\n\nfunction App({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_auth_client__WEBPACK_IMPORTED_MODULE_1__.Provider // Provider options are not required but can be useful in situations where\n  // you have a short session maxAge time. Shown here with default values.\n  , {\n    options: {\n      // Client Max Age controls how often the useSession in the client should\n      // contact the server to sync the session state. Value in seconds.\n      // e.g.\n      // * 0  - Disabled (always use cache value)\n      // * 60 - Sync session state with server if it's older than 60 seconds\n      clientMaxAge: 0,\n      // Keep Alive tells windows / tabs that are signed in to keep sending\n      // a keep alive request (which extends the current session expiry) to\n      // prevent sessions in open windows from expiring. Value in seconds.\n      //\n      // Note: If a session has expired when keep alive is triggered, all open\n      // windows / tabs will be updated to reflect the user is signed out.\n      keepAlive: 0\n    },\n    session: pageProps.session,\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtYXBwLy4vcGFnZXMvX2FwcC5qcz9kNTMwIl0sIm5hbWVzIjpbIkFwcCIsIkNvbXBvbmVudCIsInBhZ2VQcm9wcyIsImNsaWVudE1heEFnZSIsImtlZXBBbGl2ZSIsInNlc3Npb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0NBR0E7QUFDQTs7QUFDZSxTQUFTQSxHQUFULENBQWE7QUFBRUMsV0FBRjtBQUFhQztBQUFiLENBQWIsRUFBdUM7QUFDcEQsc0JBQ0UsOERBQUMsc0RBQUQsQ0FDRTtBQUNBO0FBRkY7QUFHRSxXQUFPLEVBQUU7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLGtCQUFZLEVBQUUsQ0FOUDtBQU9QO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxlQUFTLEVBQUU7QUFiSixLQUhYO0FBa0JFLFdBQU8sRUFBRUYsU0FBUyxDQUFDRyxPQWxCckI7QUFBQSwyQkFvQkUsOERBQUMsU0FBRCxvQkFBZUgsU0FBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBcEJGO0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFERjtBQXdCRCIsImZpbGUiOiIuL3BhZ2VzL19hcHAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJuZXh0LWF1dGgvY2xpZW50XCJcbmltcG9ydCBcIi4vc3R5bGVzLmNzc1wiXG5cbi8vIFVzZSB0aGUgPFByb3ZpZGVyPiB0byBpbXByb3ZlIHBlcmZvcm1hbmNlIGFuZCBhbGxvdyBjb21wb25lbnRzIHRoYXQgY2FsbFxuLy8gYHVzZVNlc3Npb24oKWAgYW55d2hlcmUgaW4geW91ciBhcHBsaWNhdGlvbiB0byBhY2Nlc3MgdGhlIGBzZXNzaW9uYCBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoeyBDb21wb25lbnQsIHBhZ2VQcm9wcyB9KSB7XG4gIHJldHVybiAoXG4gICAgPFByb3ZpZGVyXG4gICAgICAvLyBQcm92aWRlciBvcHRpb25zIGFyZSBub3QgcmVxdWlyZWQgYnV0IGNhbiBiZSB1c2VmdWwgaW4gc2l0dWF0aW9ucyB3aGVyZVxuICAgICAgLy8geW91IGhhdmUgYSBzaG9ydCBzZXNzaW9uIG1heEFnZSB0aW1lLiBTaG93biBoZXJlIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gICAgICBvcHRpb25zPXt7XG4gICAgICAgIC8vIENsaWVudCBNYXggQWdlIGNvbnRyb2xzIGhvdyBvZnRlbiB0aGUgdXNlU2Vzc2lvbiBpbiB0aGUgY2xpZW50IHNob3VsZFxuICAgICAgICAvLyBjb250YWN0IHRoZSBzZXJ2ZXIgdG8gc3luYyB0aGUgc2Vzc2lvbiBzdGF0ZS4gVmFsdWUgaW4gc2Vjb25kcy5cbiAgICAgICAgLy8gZS5nLlxuICAgICAgICAvLyAqIDAgIC0gRGlzYWJsZWQgKGFsd2F5cyB1c2UgY2FjaGUgdmFsdWUpXG4gICAgICAgIC8vICogNjAgLSBTeW5jIHNlc3Npb24gc3RhdGUgd2l0aCBzZXJ2ZXIgaWYgaXQncyBvbGRlciB0aGFuIDYwIHNlY29uZHNcbiAgICAgICAgY2xpZW50TWF4QWdlOiAwLFxuICAgICAgICAvLyBLZWVwIEFsaXZlIHRlbGxzIHdpbmRvd3MgLyB0YWJzIHRoYXQgYXJlIHNpZ25lZCBpbiB0byBrZWVwIHNlbmRpbmdcbiAgICAgICAgLy8gYSBrZWVwIGFsaXZlIHJlcXVlc3QgKHdoaWNoIGV4dGVuZHMgdGhlIGN1cnJlbnQgc2Vzc2lvbiBleHBpcnkpIHRvXG4gICAgICAgIC8vIHByZXZlbnQgc2Vzc2lvbnMgaW4gb3BlbiB3aW5kb3dzIGZyb20gZXhwaXJpbmcuIFZhbHVlIGluIHNlY29uZHMuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIE5vdGU6IElmIGEgc2Vzc2lvbiBoYXMgZXhwaXJlZCB3aGVuIGtlZXAgYWxpdmUgaXMgdHJpZ2dlcmVkLCBhbGwgb3BlblxuICAgICAgICAvLyB3aW5kb3dzIC8gdGFicyB3aWxsIGJlIHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgdXNlciBpcyBzaWduZWQgb3V0LlxuICAgICAgICBrZWVwQWxpdmU6IDAsXG4gICAgICB9fVxuICAgICAgc2Vzc2lvbj17cGFnZVByb3BzLnNlc3Npb259XG4gICAgPlxuICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxuICAgIDwvUHJvdmlkZXI+XG4gIClcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/_app.js\n");

/***/ }),

/***/ "./pages/styles.css":
/*!**************************!*\
  !*** ./pages/styles.css ***!
  \**************************/
/***/ (function() {



/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ (function(module) {

"use strict";
module.exports = require("react");;

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ (function(module) {

"use strict";
module.exports = require("react/jsx-dev-runtime");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
var __webpack_exports__ = (__webpack_exec__("./pages/_app.js"));
module.exports = __webpack_exports__;

})();